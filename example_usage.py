"""
Exemplo de uso do sistema de previs√£o de flora√ß√£o
"""

import requests
import json
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns

def example_api_usage():
    """Exemplo de uso da API"""
    print("üå∏ EXEMPLO DE USO DA API DE PREVIS√ÉO DE FLORA√á√ÉO")
    print("=" * 60)
    
    # Configura√ß√µes
    base_url = "http://localhost:5000"
    
    # 1. Health Check
    print("\n1. Verificando status da API...")
    try:
        response = requests.get(f"{base_url}/api/health")
        if response.status_code == 200:
            print("‚úÖ API est√° funcionando")
            print(f"   Status: {response.json()['status']}")
        else:
            print("‚ùå API n√£o est√° funcionando")
            return
    except requests.exceptions.ConnectionError:
        print("‚ùå API n√£o est√° rodando. Execute 'python app.py' primeiro")
        return
    
    # 2. Informa√ß√µes do Modelo
    print("\n2. Verificando informa√ß√µes do modelo...")
    try:
        response = requests.get(f"{base_url}/api/model/info")
        if response.status_code == 200:
            model_info = response.json()
            print(f"‚úÖ Modelo carregado: {model_info['model_loaded']}")
            if model_info['model_loaded']:
                print(f"   Modelo: {model_info['model_name']}")
                print(f"   Features: {model_info['features_count']}")
        else:
            print("‚ùå Modelo n√£o encontrado")
            print("   Execute 'python train_model.py' primeiro")
    except Exception as e:
        print(f"‚ùå Erro ao verificar modelo: {e}")
    
    # 3. Previs√£o de Flora√ß√£o
    print("\n3. Fazendo previs√£o de flora√ß√£o...")
    
    # Coordenadas de exemplo (Jefferson City, MO)
    forecast_data = {
        "latitude": 38.6275,
        "longitude": -92.5666,
        "days_ahead": 14
    }
    
    try:
        response = requests.post(f"{base_url}/api/forecast", json=forecast_data)
        
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ Previs√£o gerada com sucesso!")
            print(f"   Pico de flora√ß√£o: {result['peak_analysis']['peak_date']}")
            print(f"   Probabilidade m√°xima: {result['peak_analysis']['peak_probability']:.1%}")
            print(f"   Tend√™ncia: {result['peak_analysis']['trend']}")
            print(f"   Confian√ßa: {result['peak_analysis']['confidence']}")
            
            # Mostra insights
            print("\n   Insights:")
            for insight in result['insights']:
                print(f"   - {insight}")
            
            # Mostra recomenda√ß√µes
            print("\n   Recomenda√ß√µes:")
            for action in result['summary']['action_items']:
                print(f"   - {action}")
            
            # Salva resultado
            save_forecast_result(result)
            
        else:
            print(f"‚ùå Erro na previs√£o: {response.status_code}")
            print(f"   Resposta: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erro ao fazer previs√£o: {e}")
    
    # 4. Dados Meteorol√≥gicos
    print("\n4. Coletando dados meteorol√≥gicos...")
    
    weather_data = {
        "latitude": 38.6275,
        "longitude": -92.5666,
        "start_date": "2025-09-01",
        "end_date": "2025-09-15"
    }
    
    try:
        response = requests.post(f"{base_url}/api/weather", json=weather_data)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Dados meteorol√≥gicos coletados: {result['summary']['total_records']} registros")
            print(f"   Per√≠odo: {result['summary']['date_range']}")
            print(f"   Localiza√ß√£o: {result['summary']['location']}")
        else:
            print(f"‚ùå Erro ao coletar dados meteorol√≥gicos: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao coletar dados meteorol√≥gicos: {e}")

def save_forecast_result(result):
    """Salva resultado da previs√£o em arquivo"""
    try:
        # Cria DataFrame com dados da previs√£o
        forecast_df = pd.DataFrame(result['forecast_data'])
        forecast_df['bloom_probability'] = result['probabilities']
        
        # Salva em CSV
        forecast_df.to_csv('outputs/example_forecast.csv', index=False)
        print("   üìÅ Resultado salvo em: outputs/example_forecast.csv")
        
        # Cria visualiza√ß√£o
        create_visualization(forecast_df, result)
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro ao salvar resultado: {e}")

def create_visualization(df, result):
    """Cria visualiza√ß√£o dos resultados"""
    try:
        plt.style.use('seaborn-v0_8')
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle('Previs√£o de Flora√ß√£o - An√°lise Completa', fontsize=16, fontweight='bold')
        
        # Gr√°fico 1: Probabilidades ao longo do tempo
        axes[0, 0].plot(df['date'], df['bloom_probability'], 'b-', linewidth=2)
        axes[0, 0].axhline(y=0.7, color='r', linestyle='--', alpha=0.7, label='Limiar Alto')
        axes[0, 0].axhline(y=0.5, color='orange', linestyle='--', alpha=0.7, label='Limiar M√©dio')
        axes[0, 0].set_title('Probabilidades de Flora√ß√£o')
        axes[0, 0].set_ylabel('Probabilidade')
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)
        
        # Gr√°fico 2: Temperatura vs Probabilidade
        axes[0, 1].scatter(df['temperature_2m'], df['bloom_probability'], 
                          alpha=0.6, c=df['bloom_probability'], cmap='RdYlBu')
        axes[0, 1].set_title('Temperatura vs Probabilidade')
        axes[0, 1].set_xlabel('Temperatura (¬∞C)')
        axes[0, 1].set_ylabel('Probabilidade')
        axes[0, 1].grid(True, alpha=0.3)
        
        # Gr√°fico 3: Umidade vs Probabilidade
        axes[1, 0].scatter(df['relative_humidity_2m'], df['bloom_probability'], 
                          alpha=0.6, c=df['bloom_probability'], cmap='RdYlBu')
        axes[1, 0].set_title('Umidade vs Probabilidade')
        axes[1, 0].set_xlabel('Umidade Relativa (%)')
        axes[1, 0].set_ylabel('Probabilidade')
        axes[1, 0].grid(True, alpha=0.3)
        
        # Gr√°fico 4: Distribui√ß√£o das probabilidades
        axes[1, 1].hist(df['bloom_probability'], bins=20, alpha=0.7, color='skyblue', edgecolor='black')
        axes[1, 1].axvline(x=df['bloom_probability'].mean(), color='red', linestyle='--', 
                          label=f'M√©dia: {df["bloom_probability"].mean():.2f}')
        axes[1, 1].set_title('Distribui√ß√£o das Probabilidades')
        axes[1, 1].set_xlabel('Probabilidade')
        axes[1, 1].set_ylabel('Frequ√™ncia')
        axes[1, 1].legend()
        axes[1, 1].grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig('outputs/example_visualization.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print("   üìä Visualiza√ß√£o salva em: outputs/example_visualization.png")
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro ao criar visualiza√ß√£o: {e}")

def example_multiple_locations():
    """Exemplo com m√∫ltiplas localiza√ß√µes"""
    print("\nüåç EXEMPLO COM M√öLTIPLAS LOCALIZA√á√ïES")
    print("=" * 60)
    
    locations = [
        {"name": "Jefferson City, MO", "lat": 38.6275, "lon": -92.5666},
        {"name": "Springfield, MO", "lat": 37.2089, "lon": -93.2923},
        {"name": "Kansas City, MO", "lat": 39.0997, "lon": -94.5786}
    ]
    
    base_url = "http://localhost:5000"
    
    for location in locations:
        print(f"\nüìç {location['name']}")
        print("-" * 40)
        
        try:
            response = requests.post(f"{base_url}/api/forecast", json={
                "latitude": location["lat"],
                "longitude": location["lon"],
                "days_ahead": 7
            })
            
            if response.status_code == 200:
                result = response.json()
                print(f"   Pico: {result['peak_analysis']['peak_date']}")
                print(f"   Probabilidade: {result['peak_analysis']['peak_probability']:.1%}")
                print(f"   Tend√™ncia: {result['peak_analysis']['trend']}")
            else:
                print(f"   ‚ùå Erro: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO EXEMPLOS DE USO")
    print("=" * 60)
    print("Certifique-se de que a API est√° rodando:")
    print("1. Execute 'python train_model.py' para treinar o modelo")
    print("2. Execute 'python app.py' para iniciar a API")
    print("3. Execute este script para testar")
    
    input("\nPressione Enter para continuar...")
    
    # Exemplo principal
    example_api_usage()
    
    # Exemplo com m√∫ltiplas localiza√ß√µes
    example_multiple_locations()
    
    print("\n" + "=" * 60)
    print("‚úÖ EXEMPLOS CONCLU√çDOS!")
    print("=" * 60)
    print("Arquivos gerados:")
    print("- outputs/example_forecast.csv")
    print("- outputs/example_visualization.png")
    print("\nPara usar a interface web, acesse: http://localhost:5000")

if __name__ == "__main__":
    main()
